ERR=0
red='\e[0;31;1m'
green='\e[0;32;1m'
yellow='\e[0;33m'
blue='\e[0;34m'
lightblue='\e[0;94m'
blightblue='\e[0;94;1m'
bold='\e[0;1m'
NC='\e[0m' # No Color
MSGNF="${red}[ NOT FOUND ]${NC}"

LCI_MSG_OK=`printf "%s%10s%s" ${green} "OK" ${NC}`
LCI_MSG_ERROR=`printf "%s%10s%s" ${red} "ERROR" ${NC}`
LCI_MSG_INFO=`printf "%s%10s%s" ${lightblue} "Info" ${NC}`
LCI_MSG_WARNING=`printf "%s%10s%s" ${yellow} "Warning" ${NC}`
LCI_MSG=`printf "%s%10s%s" "" `
LCI_MSG_HEADER=`printf "%s%10s%s" ${blightblue} "" ${NC}`
MSGF="${green}[  FOUND   ]${NC}"

function LCI_QUIT () {
	printf "${LCI_MSG_ERROR} | ${red}Check/Update your config${NC}\n";
	LCI_PRINT_SEPARATOR
	exit;
}

function LCI_FORCE_QUIT () {
	printf "${LCI_MSG_ERROR} | ${red}%s${NC}\n" "${1}";
	LCI_PRINT_SEPARATOR
	exit;
}

function LCI_PRINT_MSG () {
	printf "${LCI_MSG} | %-30s\n" "${1}";
}

function LCI_PRINT_INFO () {
	printf "${LCI_MSG_INFO} | %-30s\n" "${1}";
}

function LCI_PRINT_WARNING () {
	printf "${LCI_MSG_WARNING} | ${yellow}%-30s${NC}\n" "${1}";
}

function LCI_PRINT_L1 () {
	printf "${LCI_MSG_INFO} | ${lightblue}%-30s${NC}\n" "${1}";
}

function LCI_PRINT_HEADER () {
	printf "${LCI_MSG_HEADER} | ${blightblue}%-30s${NC}\n" "${1}";
}

function LCI_PRINT_SEPARATOR () {
	echo -e "${bold}--------------------------------------------------------------------------${NC}";
}

function LCI_PRINT_CHECK_OK () {
	printf "${LCI_MSG_OK} | %-30s : %s\n" ${1} ${!1};
}

function LCI_PRINT_PATCH_CHECK_OK () {
	printf "${LCI_MSG_OK} | %s\n" ${1};
}

function LCI_PRINT_CHECK_WARNING () {
	printf "${LCI_MSG_WARNING} | %-30s : %s\n" ${1} ${!1};
}

function LCI_PRINT_PATCH_CHECK_WARNING () {
	printf "${LCI_MSG_WARNING} | %s NOT FOUND\n" ${1};
}

function LCI_PRINT_CHECK_ERROR () {
	printf "${LCI_MSG_ERROR} | %-30s : %s\n" ${1} ${!1};
	ERR=1;
}

function LCI_PRINT_PATCH_CHECK_ERROR () {
	printf "${LCI_MSG_ERROR} | %s\n" ${1};
	ERR=1;
}

function LCI_CHECKDIR () {
if [ ! -z ${!1} ]&&[ -d ${!1} ]; then
LCI_PRINT_CHECK_OK "${1}"
else
LCI_PRINT_CHECK_ERROR "${1}"
fi
}

function LCI_CHECKFILE () {
if [ -f ${!1} ]; then
LCI_PRINT_CHECK_OK "${1}"
else
LCI_PRINT_CHECK_ERROR "${1}"
fi
}

function LCI_PATCH_CHECKFILE () {
if [ -f ${1} ]; then
LCI_PRINT_PATCH_CHECK_OK "${1}"
else
LCI_PRINT_WARNING "${1} NOT FOUND"
LCI_PRINT_WARNING "Create dummy ${1}"
touch ${1}
fi
}


function LCI_CHECKVAR () {
if [ ! -z ${!1} ]; then
LCI_PRINT_CHECK_OK "${1}"
else
LCI_PRINT_CHECK_ERROR "${1}"
fi
}

function LCI_CHECKOPTDIR () {
if [ ! -z ${!1} ]&&[ -d ${!1} ]; then
LCI_PRINT_CHECK_OK "${1}"
else
LCI_PRINT_CHECK_WARNING "${1}"
fi
}

function LCI_CHECKOPTVAR () {
if [ ! -z ${!1} ]; then
LCI_PRINT_CHECK_OK "${1}"
else
LCI_PRINT_CHECK_WARNING "${1}"
fi
}

function LCI_CPF () {
	#printf "${LCI_MSG} | copy %-s\n" "${1}";
	#printf "${LCI_MSG} |   to %-s\n" "${2}";
	cp ${1} ${2};
}

function LCI_CPD () {
	#printf "${LCI_MSG} | copy %-s\n" "${1}";
	#printf "${LCI_MSG} |   to %-s\n" "${2}";
	cp -r ${1} ${2};
}


LCI_PRINT_SEPARATOR
LCI_PRINT_SEPARATOR
LCI_PRINT_HEADER "Linaro"

LCI_PRINT_SEPARATOR
LCI_PRINT_L1 "OP-TEE components"
LCI_CHECKDIR "TA_DEV_KIT_DIR"

LCI_PRINT_SEPARATOR
LCI_PRINT_L1 "Global Platform testsuite"
LCI_CHECKVAR "CFG_GP_TESTSUITE_ENABLE"
if [ ${CFG_GP_TESTSUITE_ENABLE} == "y" ]; then
LCI_CHECKVAR "CFG_GP_API"
LCI_CHECKDIR "CFG_GP_PACKAGE_PATH"
LCI_CHECKDIR "CFG_GP_XSL_PACKAGE_PATH"
fi

LCI_PRINT_SEPARATOR
if [ ${ERR} == 0 ]; then
	if [ ! -f .conf ]; then
	while true; do
		echo -en "\n\t--> Is your TEE user environment setup correct [y/n] ? : "
		read -p " " answer

		case $answer in
			[Nn]* ) YES=0; break;;
			[Yy]* ) YES=1; break;;
			* ) echo -e "Please enter yes or no.";;
		esac
	done

	if [ ${YES} == 0 ]; then
		if [ -f .conf ]; then
			rm .conf;
		fi
		LCI_QUIT;
	fi
	touch .conf
	fi

else
	LCI_QUIT;

fi
